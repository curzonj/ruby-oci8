/* -*- c-file-style: "ruby"; indent-tabs-mode: nil -*- */
<%= header_comment
# This file is processed by apiwrap.rb.
%>
#define API_WRAP_C 1
#include "apiwrap.h"
<%
funcs.each do |f|
  if f.version == 800
    if f.remote
######################################################################
##
## remote API without runtime-check - start
##
######################################################################
%>
/*
 * <%=f.name%>
 */
typedef struct {
<% f.args.each do |a|
%>    <%= a.dcl %>;
<% end
%>} <%=f.name%>_data_t;

static VALUE <%=f.name%>_cb(void *user_data)
{
    <%=f.name%>_data_t *data = (<%=f.name%>_data_t *)user_data;
    return (VALUE)<%=f.name%>(<%= f.args.collect do |a| 'data->' + a.name; end.join(', ') %>);
}

sword <%=f.name%>_nb(oci8_svcctx_t *svcctx, <%=f.args.collect {|arg| arg.dcl}.join(', ')%>)
{
    <%=f.name%>_data_t data;
<% f.args.each do |a|
%>    data.<%=a.name%> = <%=a.name%>;
<% end
%>    return oci8_blocking_region(svcctx, <%=f.name%>_cb, &data);
}
<%
######################################################################
##
## remote API without runtime-check - end
##
######################################################################
    end
  else # f.version == 800
    if f.remote
######################################################################
##
## remote API with runtime-check - start
##
######################################################################
%>
/*
 * <%=f.name%>
 */
typedef struct {
<% f.args.each do |a|
%>    <%= a.dcl %>;
<% end
%>} <%=f.name%>_data_t;

#if defined RUNTIME_API_CHECK
int have_<%=f.name%>_nb;
typedef sword (*<%=f.name%>_func_t)(<%=f.args.collect {|arg| arg.dcl}.join(', ')%>);
static <%=f.name%>_func_t <%=f.name%>_func;
#define <%=f.name%> <%=f.name%>_func
#endif

#if defined RUNTIME_API_CHECK || ORACLE_CLIENT_VERSION >= <%=f.version%>
static VALUE <%=f.name%>_cb(void *user_data)
{
    <%=f.name%>_data_t *data = (<%=f.name%>_data_t *)user_data;
    return (VALUE)<%=f.name%>(<%= f.args.collect do |a| 'data->' + a.name; end.join(', ') %>);
}
#else
#define <%=f.name%>_cb NULL /* dummy value to pass compiilation. */
#endif

sword <%=f.name%>_nb(oci8_svcctx_t *svcctx, <%=f.args.collect {|arg| arg.dcl}.join(', ')%>)
{
    if (have_<%=f.name%>_nb) {
        <%=f.name%>_data_t data;
<% f.args.each do |a|
%>        data.<%=a.name%> = <%=a.name%>;
<% end
%>        return oci8_blocking_region(svcctx, <%=f.name%>_cb, &data);
    } else {
        rb_bug("undefined OCI function %s is called", "<%=f.name%>_nb");
    }
}
<%
######################################################################
##
## remote API with runtime-check - end
##
######################################################################
    else
######################################################################
##
## local API with runtime-check - start
##
######################################################################
%>
/*
 * <%=f.name%>
 */
#if defined RUNTIME_API_CHECK
int have_<%=f.name%>;
typedef sword (*<%=f.name%>_func_t)(<%=f.args.collect {|arg| arg.dcl}.join(', ')%>);
static <%=f.name%>_func_t <%=f.name%>_func;
#elif ORACLE_CLIENT_VERSION >= <%=f.version%>
#define <%=f.name%>_func <%=f.name%>
#else
#define <%=f.name%>_func(<%=f.args.collect {|arg| arg.name}.join(', ')%>) (0)
#endif

sword <%=f.name%>_fn(<%=f.args.collect {|arg| arg.dcl}.join(', ')%>)
{
    if (have_<%=f.name%>) {
#if defined RUNTIME_API_CHECK
        return <%=f.name%>_func(<%=f.args.collect {|arg| arg.name}.join(', ')%>);
#elif ORACLE_CLIENT_VERSION >= <%=f.version%>
        return <%=f.name%>(<%=f.args.collect {|arg| arg.name}.join(', ')%>);
#else
        return 0;
#endif
    } else {
        rb_bug("undefined OCI function %s is called", "<%=f.name%>_nb");
    }
}
<%
######################################################################
##
## local API with runtime-check - end
##
######################################################################
    end
  end
end # funcs.each
######################################################################
##
## RUNTIME_API_CHECK
##
######################################################################
current_version = funcs[0].version
have_vars = []
%>
#if defined RUNTIME_API_CHECK
int oracle_client_version;

void Init_oci8_apiwrap(void)
{
    oracle_client_version = 800;
<%
funcs.each do |f|
  next if f.version == 800
  if current_version != f.version
    unless have_vars.empty?
%>    /* pass Oracle <%=current_version.to_s.gsub(/(.)(.)$/, '.\1.\2')%> API */
    oracle_client_version = <%=current_version%>;
<%    have_vars.each do |v|
%>    <%=v%> = 1;
<%    end
    end
    have_vars = []
    current_version = f.version
%>
    /*
     * checking Oracle <%=f.version.to_s.gsub(/(.)(.)$/, '.\1.\2')%> API
     */
<%
  end
  have_vars << 'have_' + f.name + (f.remote ? '_nb' : '')
%>    <%=f.name%>_func = (<%=f.name%>_func_t)oci8_find_symbol("<%=f.name%>");
    if (<%=f.name%>_func != NULL)
        return;
<%
end
%>    /* pass Oracle <%=current_version.to_s.gsub(/(.)(.)$/, '.\1.\2')%> API */
    oracle_client_version = <%=current_version%>;
<%    have_vars.each do |v|
%>    <%=v%> = 1;
<%    end
%>}
#endif /* RUNTIME_API_CHECK */
