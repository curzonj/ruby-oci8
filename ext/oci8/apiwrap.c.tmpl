/* -*- c-file-style: "ruby"; indent-tabs-mode: nil -*- */
<%= header_comment
# This file is processed by apiwrap.rb.
%>
#define API_WRAP_C 1
#include "apiwrap.h"

<%
funcs.each do |f|
  if f.version == 800
    if f.remote
%>
/*
 * <%=f.name%>
 */
typedef struct {
<% f.args.each do |a|
%>    <%= a.dcl %>;
<% end
%>} <%=f.name%>_data_t;

static VALUE <%=f.name%>_cb(void *user_data)
{
    <%=f.name%>_data_t *data = (<%=f.name%>_data_t *)user_data;
    return (VALUE)<%=f.name%>(<%= f.args.collect do |a| 'data->' + a.name; end.join(', ') %>);
}

sword <%=f.name%>_nb(oci8_svcctx_t *svcctx, <%=f.args.collect {|arg| arg.dcl}.join(', ')%>)
{
    <%=f.name%>_data_t data;
<% f.args.each do |a|
%>    data.<%=a.name%> = <%=a.name%>;
<% end
%>    return oci8_blocking_region(svcctx, <%=f.name%>_cb, &data);
}
<%
    end
  else # f.version == 800
    if f.remote
%>
/*
 * <%=f.name%>
 */
typedef struct {
<% f.args.each do |a|
%>    <%= a.dcl %>;
<% end
%>} <%=f.name%>_data_t;

#if defined RUNTIME_API_CHECK
typedef sword (*<%=f.name%>_func_t)(<%=f.args.collect {|arg| arg.dcl}.join(', ')%>);
static <%=f.name%>_func_t <%=f.name%>_func;
<%=f.name%>_nb_func_t <%=f.name%>_nb;

static VALUE <%=f.name%>_cb(void *user_data)
{
    <%=f.name%>_data_t *data = (<%=f.name%>_data_t *)user_data;
    return (VALUE)<%=f.name%>_func(<%= f.args.collect do |a| 'data->' + a.name; end.join(', ') %>);
}

sword <%=f.name%>_nb_func(oci8_svcctx_t *svcctx, <%=f.args.collect {|arg| arg.dcl}.join(', ')%>)
{
    <%=f.name%>_data_t data;
<% f.args.each do |a|
%>    data.<%=a.name%> = <%=a.name%>;
<% end
%>    return oci8_blocking_region(svcctx, <%=f.name%>_cb, &data);
}
#elif defined HAVE_<%=f.name.upcase%>
static VALUE <%=f.name%>_cb(void *user_data)
{
    <%=f.name%>_data_t *data = (<%=f.name%>_data_t *)user_data;
    return (VALUE)<%=f.name%>(<%= f.args.collect do |a| 'data->' + a.name; end.join(', ') %>);
}

sword <%=f.name%>_nb(oci8_svcctx_t *svcctx, <%=f.args.collect {|arg| arg.dcl}.join(', ')%>)
{
    <%=f.name%>_data_t data;
<% f.args.each do |a|
%>    data.<%=a.name%> = <%=a.name%>;
<% end
%>    return oci8_blocking_region(svcctx, <%=f.name%>_cb, &data);
}
#else
sword <%=f.name%>_nb(oci8_svcctx_t *svcctx, <%=f.args.collect {|arg| arg.dcl}.join(', ')%>)
{
    rb_bug("undefined OCI function %s is called", "<%=f.name%>_nb");
}
#endif
<%
    else
%>
/*
 * <%=f.name%>
 */
#if defined RUNTIME_API_CHECK
<%=f.name%>_func_t <%=f.name%>_func;
#elif !defined HAVE_<%=f.name.upcase%>
sword <%=f.name%>_func(<%=f.args.collect {|arg| arg.dcl}.join(', ')%>)
{
    rb_bug("undefined OCI function %s is called", "<%=f.name%>");
}
#endif
<%
    end
  end
end # funcs.each
%>
#if defined RUNTIME_API_CHECK
void Init_oci8_apiwrap(void)
{
<%
funcs.each do |f|
  if f.version != 800
    if f.remote
%>    <%=f.name%>_func = (<%=f.name%>_func_t)oci8_find_symbol("<%=f.name%>");
    if (<%=f.name%>_func != NULL)
        <%=f.name%>_nb = <%=f.name%>_nb_func;
<%
    else
%>    <%=f.name%>_func = (<%=f.name%>_func_t)oci8_find_symbol("<%=f.name%>");
<%
    end
  end
end
%>}
#endif /* RUNTIME_API_CHECK */
